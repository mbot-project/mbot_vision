"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mbot_vision_lcm.mbot_cone_t

class mbot_cone_array_t(object):
    __slots__ = ["utime", "array_size", "detections"]

    __typenames__ = ["int64_t", "int32_t", "mbot_vision_lcm.mbot_cone_t"]

    __dimensions__ = [None, None, ["array_size"]]

    def __init__(self):
        self.utime = 0
        self.array_size = 0
        self.detections = []

    def encode(self):
        buf = BytesIO()
        buf.write(mbot_cone_array_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.array_size))
        for i0 in range(self.array_size):
            assert self.detections[i0]._get_packed_fingerprint() == mbot_vision_lcm.mbot_cone_t._get_packed_fingerprint()
            self.detections[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mbot_cone_array_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mbot_cone_array_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = mbot_cone_array_t()
        self.utime, self.array_size = struct.unpack(">qi", buf.read(12))
        self.detections = []
        for i0 in range(self.array_size):
            self.detections.append(mbot_vision_lcm.mbot_cone_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if mbot_cone_array_t in parents: return 0
        newparents = parents + [mbot_cone_array_t]
        tmphash = (0x8e24a47d2dab6b9b+ mbot_vision_lcm.mbot_cone_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if mbot_cone_array_t._packed_fingerprint is None:
            mbot_cone_array_t._packed_fingerprint = struct.pack(">Q", mbot_cone_array_t._get_hash_recursive([]))
        return mbot_cone_array_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", mbot_cone_array_t._get_packed_fingerprint())[0]

