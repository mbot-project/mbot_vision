"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class mbot_cone_t(object):
    __slots__ = ["name", "x", "z"]

    __typenames__ = ["string", "float", "float"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.name = ""
        self.x = 0.0
        self.z = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(mbot_cone_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ff", self.x, self.z))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mbot_cone_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mbot_cone_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = mbot_cone_t()
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.x, self.z = struct.unpack(">ff", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if mbot_cone_t in parents: return 0
        tmphash = (0xddb557c8a3fdfee5) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if mbot_cone_t._packed_fingerprint is None:
            mbot_cone_t._packed_fingerprint = struct.pack(">Q", mbot_cone_t._get_hash_recursive([]))
        return mbot_cone_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", mbot_cone_t._get_packed_fingerprint())[0]

